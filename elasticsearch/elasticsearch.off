package elasticsearch


import (
  //"errors"
  //"fmt"
  "gopkg.in/olivere/elastic.v3"
  //"reflect"
  //"time"
  "log"
)

/*
type Log struct {
  App     string    `json:"app"`
  Message string    `json:"message"`
  Time    time.Time `json:"time"`
}
*/
/*
func main() {
  client, err := elastic.NewClient(elastic.SetURL("http://172.17.0.2/:9200"))
  if err != nil {
    panic(err)
  }

  err = createIndexWithLogsIfDoesNotExist(client)
  if err != nil {
    panic(err)
  }

  err = findAndPrintAppLogs(client)
  if err != nil {
    panic(err)
  }
}
*/
/*
func createIndexWithLogsIfDoesNotExist(client *elastic.Client) error {
  exists, err := client.IndexExists(indexName).Do()
  if err != nil {
    return err
  }

  if exists {
    return nil
  }

  res, err := client.CreateIndex(indexName).
    Body(indexMapping).
    Do()

  if err != nil {
    return err
  }
  if !res.Acknowledged {
    return errors.New("CreateIndex was not acknowledged. Check that timeout value is correct.")
  }

  return addLogsToIndex(client)
}
*/

/*
func addLogsToIndex(client *elastic.Client) error {
  for i := 0; i < 10; i++ {
    l := Log{
      App:     "myApp",
      Message: fmt.Sprintf("message %d", i),
      Time:    time.Now(),
    }

    _, err := client.Index().
      Index(indexName).
      Type(docType).
      BodyJson(l).
      Do()

    if err != nil {
      return err
    }
  }

  return nil
}
*/

/*
func findAndPrintAppLogs(client *elastic.Client) error {
  termQuery := elastic.NewTermQuery("app", appName)

  res, err := client.Search(indexName).
    Index(indexName).
    Query(termQuery).
    Sort("time", true).
    Do()

  if err != nil {
    return err
  }

  fmt.Println("Logs found:")
  var l Log
  for _, item := range res.Each(reflect.TypeOf(l)) {
    l := item.(Log)
    fmt.Printf("time: %s message: %s\n", l.Time, l.Message)
  }

  return nil
}
*/

//beta
func SearchTerm(s string) string {

  //return s

  // Search with a term query
  termQuery := elastic.NewTermQuery("colonia", s)

  searchResult, err := client.Search().
    Index("mx").        // search in index "twitter"
    Query(&termQuery).  // specify the query
    Sort("colonia", true). // sort by "user" field, ascending
    From(0).Size(10).   // take documents 0-9
    Pretty(true).       // pretty print request and response JSON
    Do()                // execute
  if err != nil {
    // Handle error
    panic(err)
  }
  return s
}


func init() {
  createClient()
}


var client *elastic.Client


func createClient() {
  var err error
  client, err := elastic.NewClient(elastic.SetURL("http://172.17.0.2/:9200"))
  if err != nil {
    log.Fatalf("[createClient]: %s\n", err)
  }
}

/*
func getClient() *elastic.Client {
  if client == nil {
    var err error
    client, err := elastic.NewClient(elastic.SetURL("http://172.17.0.2/:9200"))
    if err != nil {
      //panic(err)
      log.Fatalf("[getClient]: %s\n", err)
    }
  }
  return client
}
*/